rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can only access their own data
    match /users/{userId} {
      // Allow read/write only if the user is authenticated and accessing their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Profile subcollection
      match /profile/{document=**} {
        // Allow read for all authenticated users (needed for friend requests and search)
        allow read: if request.auth != null;
        
        // Allow write for own profile
        allow write: if request.auth != null && request.auth.uid == userId;
        
        // Allow updating friends array for friend acceptance (cross-user updates)
        // This allows users to add themselves to others' friends lists
        allow update: if request.auth != null;
      }
      
      // Transactions subcollection
      match /transactions/{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Budgets subcollection
      match /budgets/{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Usernames collection - for username lookup
    match /usernames/{username} {
      // Allow read for all authenticated users (for username lookup)
      allow read: if request.auth != null;
      
      // Allow write only if:
      // 1. User is authenticated
      // 2. Document doesn't exist (to prevent overwriting/squatting)
      // 3. The userId in the document matches the authenticated user
      allow create: if request.auth != null 
        && !exists(/databases/$(database)/documents/usernames/$(username))
        && request.resource.data.userId == request.auth.uid;
      
      // Allow update only if:
      // 1. User is authenticated
      // 2. The userId in the document matches the authenticated user
      allow update: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      // Allow delete only if:
      // 1. User is authenticated
      // 2. The userId in the document matches the authenticated user
      allow delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }
    
    // Friend requests collection
    match /friendRequests/{requestId} {
      // Allow read if user is sender or receiver
      allow read: if request.auth != null 
        && (resource.data.senderId == request.auth.uid 
            || resource.data.receiverId == request.auth.uid);
      
      // Allow list queries - we need to be permissive for pairKey queries
      // The application logic ensures users only query for their own requests
      allow list: if request.auth != null;
      
      // Allow create if user is the sender and status is pending or accepted
      allow create: if request.auth != null 
        && request.resource.data.senderId == request.auth.uid
        && (request.resource.data.status == 'pending' 
            || request.resource.data.status == 'accepted');
      
      // Allow update if user is the receiver (for accepting/declining)
      allow update: if request.auth != null 
        && resource.data.receiverId == request.auth.uid;
      
      // Allow delete if user is sender or receiver
      allow delete: if request.auth != null 
        && (resource.data.senderId == request.auth.uid 
            || resource.data.receiverId == request.auth.uid);
    }
    
    // Notifications collection
    match /notifications/{notificationId} {
      // Allow read/write only if the user is authenticated and accessing their own notifications
      allow read, write: if request.auth != null && resource.data.userId == request.auth.uid;
      
      // Allow create for any authenticated user (needed for friend request notifications)
      // The application logic ensures notifications are created appropriately
      allow create: if request.auth != null;
      
      // Allow list queries for authenticated users (application logic ensures users only query their own)
      allow list: if request.auth != null;
    }

    // Shared expenses ledger
    match /artifacts/{appId}/sharedExpenses/{expenseId} {
      function isAuthed() { return request.auth != null; }
      function uid() { return request.auth.uid; }
      function isInvolved() { return isAuthed() && (resource.data.lenderId == uid() || resource.data.borrowerId == uid()); }
      function isCreateValid() {
        return isAuthed()
          && request.resource.data.keys().hasOnly(['lenderId','borrowerId','amount','description','status','createdAt','lenderUsername','borrowerUsername'])
          && request.resource.data.lenderId == uid()
          && request.resource.data.status == 'pending_approval'
          && request.resource.data.amount is number
          && request.resource.data.borrowerId is string
          && request.resource.data.description is string;
      }
      function changedOnly(keys) {
        return request.resource.data.diff(resource.data).changedKeys().hasOnly(keys);
      }
      function isAccept() {
        return isAuthed()
          && resource.data.status == 'pending_approval'
          && request.resource.data.status == 'active'
          && resource.data.borrowerId == uid();
      }
      // Settlement workflow removed

      // Read: only lender or borrower
      allow get, list: if isInvolved();

      // Create: lender creates with pending_approval
      allow create: if isCreateValid();

      // Update: allow only controlled status transitions and limited field changes
      allow update: if isInvolved() && (
          (isAccept() && changedOnly(['status']))
        );

      // Delete: allow either party to reject while pending_approval
      allow delete: if isInvolved() && resource.data.status == 'pending_approval';
    }
  }
}