rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Users collection - users can only access their own data
    match /users/{userId} {
      // Allow read/write only if the user is authenticated and accessing their own data
      allow read, write: if request.auth != null && request.auth.uid == userId;
      
      // Profile subcollection
      match /profile/{document=**} {
        // Allow read for all authenticated users (needed for friend requests and search)
        allow read: if request.auth != null;
        
        // Allow write for own profile
        allow write: if request.auth != null && request.auth.uid == userId;
        
        // Allow updating friends array for friend acceptance (cross-user updates)
        // This allows users to add themselves to others' friends lists
        allow update: if request.auth != null 
          && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['friends']);
      }
      
      // Transactions subcollection
      match /transactions/{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
      
      // Budgets subcollection
      match /budgets/{document=**} {
        allow read, write: if request.auth != null && request.auth.uid == userId;
      }
    }
    
    // Usernames collection - for username lookup
    match /usernames/{username} {
      // Allow read for all authenticated users (for username lookup)
      allow read: if request.auth != null;
      
      // Allow write only if:
      // 1. User is authenticated
      // 2. Document doesn't exist (to prevent overwriting/squatting)
      // 3. The userId in the document matches the authenticated user
      allow create: if request.auth != null 
        && !exists(/databases/$(database)/documents/usernames/$(username))
        && request.resource.data.userId == request.auth.uid;
      
      // Allow update only if:
      // 1. User is authenticated
      // 2. The userId in the document matches the authenticated user
      allow update: if request.auth != null 
        && resource.data.userId == request.auth.uid;
      
      // Allow delete only if:
      // 1. User is authenticated
      // 2. The userId in the document matches the authenticated user
      allow delete: if request.auth != null 
        && resource.data.userId == request.auth.uid;
    }
    
    // Friend requests collection
    match /friendRequests/{requestId} {
      // Allow read if user is sender or receiver
      allow read: if request.auth != null 
        && (resource.data.senderId == request.auth.uid 
            || resource.data.receiverId == request.auth.uid);
      
      // Allow list queries - we need to be permissive for pairKey queries
      // The application logic ensures users only query for their own requests
      allow list: if request.auth != null;
      
      // Allow create if user is the sender and status is pending or accepted
      allow create: if request.auth != null 
        && request.resource.data.senderId == request.auth.uid
        && (request.resource.data.status == 'pending' 
            || request.resource.data.status == 'accepted');
      
      // Allow update if user is the receiver (for accepting/declining)
      allow update: if request.auth != null 
        && resource.data.receiverId == request.auth.uid;
      
      // Allow delete if user is sender or receiver
      allow delete: if request.auth != null 
        && (resource.data.senderId == request.auth.uid 
            || resource.data.receiverId == request.auth.uid);
    }
  }
}